---
- name: Create python app root
  become: yes
  file:
    path: /usr/share/nginx/html/testapp
    state: directory
    mode: '0777'

- name: Create templates directory
  file:
    path: /usr/share/nginx/html/testapp/templates
    state: directory

- name: Copy data template
  copy:
    src: data.html
    dest: /usr/share/nginx/html/testapp/templates

- name: Copy app.py
  copy:
    src: app.py
    dest: /usr/share/nginx/html/testapp/app.py

- name: Copy app wsgi
  copy:
    src: wsgi.py
    dest: /usr/share/nginx/html/testapp/wsgi.py

- name: Copy app requirements
  copy:
    src: requirements.txt
    dest: /usr/share/nginx/html/testapp/requirements.txt

- name: Install modules in a virtualenv
  pip:
    requirements: /usr/share/nginx/html/testapp/requirements.txt
    virtualenv: /usr/share/nginx/html/testapp/env
    virtualenv_python: python3.9.1

#- name: Configure testapp systemd service and nginx
#  hosts: VM-nginx
#  become: yes
#  become_method: sudo
#  tasks:
# By default, nginx runs the master process as root and worker processes as user http.
# To run worker processes as another user, change the user directive in nginx.conf:
# /etc/nginx/nginx.conf 
# user user [group];
- name: Add existing user '{{ ansible_user }}' to http group #nginx uses 'http' group as default
  user:
    name: test
    groups: ['http']
    append: yes

- name: Copy systemd service config
  copy:
    src: .service
    dest: /etc/systemd/system/testapp.service
  register: testappservice

- name: Reload systemctl daemons if testapp.service changed
  service:
    daemon_reload: yes
  when: testappservice.changed

- name: Start systemd testapp.service
  service: 
    name: testapp.service 
    state: started

- name: Template nginx site config
  template:
    src: .nginx
    dest: /etc/nginx/sites-available/testapp.conf

- name: Enable testapp site
  file:
    src: /etc/nginx/sites-available/testapp.conf
    dest: /etc/nginx/sites-enabled/testapp.conf
    state: link
    force: yes
  notify: "Reload nginx"
